MeshLoader: Handle .obj files with only vertices
MeshLoader: Handle material definition
MeshLoader: Handling multiple textures in object

Buffers: Keep track of resources when generating buffers.  Currently these are
         leaked

Lighting: Compute specular, diffuse and ambiant lighting i-e (phong shading)
Material: Add material to objects such as color, and light reflection color

Texture: Current value of shadert texture coordinates not used generated an
invalid value in glGetError()

RenderScene:  Should create a wrapper class that contains object information and
which can then be attached to a scene (A scene contains a list of objects).
Then a simple update() to the scene draws each objects and also updates the
position of each object.

Texture: texture.cpp currently useless, maybe removing it in the future.
Currently all it does is load images to a program_id.

Lighting: Compute normal matrix is user code not in GPU code

Model Matrix: The rendered oject should each contain a model matrix, and send it
to the gpu before drawing

RenderScene:  We shouldn't have any rendring method, a scene contains objects
but does not know anything about the objects. all it does is call their draw
method.  Current mesh objects are rendered by the scene and need a didicate
update method from render scene. IN the future these will be removed

MeshObject:  A basic object class that knows how to render a file loaded from a
mesh file.  not implemented yet.

MaterialLib:  Need to parse the material library.

RenderScene:  Need to add mesh_obj to vector of objects in render scene.

DataLoader:  A seperate class should be in charge of loading data from objects
onto the GPU memory, thit loader class should also have access to a texture
loader class which loads texture files.

ObjectLoader:  Loading functions should create a group of objects, and create an
object for each material in *.obj file.  Then these objects are return allong
and the caller is responsible for freeing them.  Each object is knows about a
material information,  these can be shared among several objects hence the usage
of std::shared_ptr for material ownership.



**********
BENCHARKING
************
Experimental Branch for bench

Try to merge textures, normals and vertices in one buffer, using one VAO, to see
if the FPS rate increases.
