MeshLoader: Handle .obj files with only vertices
MeshLoader: Handle material definition
MeshLoader: Handling multiple textures in object

Buffers: Keep track of resources when generating buffers.  Currently these are
         leaked

Lighting: Compute specular, diffuse and ambiant lighting i-e (phong shading)
Material: Add material to objects such as color, and light reflection color

Texture: Current value of shadert texture coordinates not used generated an
invalid value in glGetError()

RenderScene:  Should create a wrapper class that contains object information and
which can then be attached to a scene (A scene contains a list of objects).
Then a simple update() to the scene draws each objects and also updates the
position of each object.

Texture: texture.cpp currently useless, maybe removing it in the future.
Currently all it does is load images to a program_id.

Lighting: Compute normal matrix is user code not in GPU code

Model Matrix: The rendered oject should each contain a model matrix, and send it
to the gpu before drawing

RenderScene:  We shouldn't have any rendring method, a scene contains objects
but does not know anything about the objects. all it does is call their draw
method.  Current mesh objects are rendered by the scene and need a didicate
update method from render scene. IN the future these will be removed

MeshObject:  A basic object class that knows how to render a file loaded from a
mesh file.  not implemented yet.

MaterialLib:  Need to parse the material library.

RenderScene:  Need to add mesh_obj to vector of objects in render scene.

DataLoader:  A seperate class should be in charge of loading data from objects
onto the GPU memory, thit loader class should also have access to a texture
loader class which loads texture files.

ObjectLoader:  Loading functions should create a group of objects, and create an
object for each material in *.obj file.  Then these objects are return allong
and the caller is responsible for freeing them.  Each object is knows about a
material information,  these can be shared among several objects hence the usage
of std::shared_ptr for material ownership.

Texture manager : should only load an image once and then cache it's texture_id
and only return that texture id when asked to load a same image again.

Object rendering : should be done in a smart way, i-e all object bound to the
same material drawn consecutively, and different materials with same texture
also should be drawn consecutively.

Drawing: glMultiDrawLements, minimize CPU call to draw, draw once batch of
objects associated to a material once.

REFACTORING:
Currently files :
    - material.hpp
    - obj_loader.hpp
Need looking at.  Currently a meterial contains a list of objects such that we
bind each material once per frame, and that subsequent materials can be ordered
to avoid rebinding textures.


**********************************
BENCHMARKING:
Using sponza, by computing a VAO per object using a seperate material, the
performaincses decreases by 4. 4000fps -- 1000fps with GTX Titan


*******************************
Disabling vsync
http://stackoverflow.com/questions/17196117/disable-vertical-sync-for-glxgears
nvidia-settings : X Screen 0 / OpenGL Settings / Sync to VBlank
or configure
echo "0/SyncToVBlank=0" >> ~/.nvidia-settings-rc
nvidia-settings --load-config-only
Or just
nvidia-settings --load-config-only --assign="SyncToVBlank=0"

AMD/ATI:
/etx/X11/xorg.conf
Driver "fglrx"
Driver "radeon"
Driver "intel"
Option     "SwapbuffersWait"       "false"
$ vblank_mode=0 ./my_program
